From f46b0b39f1ec6cf8958d3a75bb0de159da639277 Mon Sep 17 00:00:00 2001
From: sentinel46 <altdaedroth@gmail.com>
Date: Thu, 21 Feb 2019 10:16:20 +0000
Subject: [PATCH]  Increment/decrement statements implementation

---
 Grammar/Grammar    |  4 +++-
 Include/token.h    |  3 +++
 Parser/tokenizer.c |  4 ++++
 Python/ast.c       | 40 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 50 insertions(+), 1 deletion(-)

diff --git a/Grammar/Grammar b/Grammar/Grammar
index 4c3f33d..5e2da52 100644
--- a/Grammar/Grammar
+++ b/Grammar/Grammar
@@ -35,13 +35,15 @@ simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
 small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
              import_stmt | global_stmt | exec_stmt | assert_stmt)
 expr_stmt: testlist (augassign (yield_expr|testlist) |
-                     ('=' (yield_expr|testlist))*)
+                     ('=' (yield_expr|testlist))* | incr_stmt | decr_stmt)
 augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
             '<<=' | '>>=' | '**=' | '//=')
 # For normal assignments, additional restrictions enforced by the interpreter
 print_stmt: 'print' ( [ test (',' test)* [','] ] |
                       '>>' test [ (',' test)+ [','] ] )
 del_stmt: 'del' exprlist
+incr_stmt: '++'
+decr_stmt: '--'
 pass_stmt: 'pass'
 flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
 break_stmt: 'break'
diff --git a/Include/token.h b/Include/token.h
index 72659ac..22a277f 100644
--- a/Include/token.h
+++ b/Include/token.h
@@ -65,6 +65,9 @@ extern "C" {
 #define ERRORTOKEN	52
 #define N_TOKENS	53
 
+#define INCREMENT       58
+#define DECREMENT       59
+
 /* Special definitions for cooperation with parser */
 
 #define NT_OFFSET		256
diff --git a/Parser/tokenizer.c b/Parser/tokenizer.c
index c6e61df..39b7cdd 100644
--- a/Parser/tokenizer.c
+++ b/Parser/tokenizer.c
@@ -85,6 +85,8 @@ char *_PyParser_TokenNames[] = {
     "DOUBLESTAREQUAL",
     "DOUBLESLASH",
     "DOUBLESLASHEQUAL",
+    "INCREMENT",
+    "DECREMENT",
     "AT",
     /* This table must match the #defines in token.h! */
     "OP",
@@ -1102,11 +1104,13 @@ PyToken_TwoChars(int c1, int c2)
         break;
     case '+':
         switch (c2) {
+        case '+':               return INCREMENT;
         case '=':               return PLUSEQUAL;
         }
         break;
     case '-':
         switch (c2) {
+        case '-':               return DECREMENT;
         case '=':               return MINEQUAL;
         }
         break;
diff --git a/Python/ast.c b/Python/ast.c
index 9460325..b47f7c3 100644
--- a/Python/ast.c
+++ b/Python/ast.c
@@ -2228,6 +2228,46 @@ ast_for_expr_stmt(struct compiling *c, const node *n)
         return AugAssign(expr1, newoperator, expr2, LINENO(n), n->n_col_offset,
                          c->c_arena);
     }
+    else if ((TYPE(CHILD(n, 1)) == incr_stmt) || (TYPE(CHILD(n, 1)) == decr_stmt)) {
+        expr_ty expr1, expr2;
+        node *ch = CHILD(n, 0);
+        operator_ty operator;
+
+        switch (TYPE(CHILD(n, 1))) {
+            case incr_stmt:
+                operator = Add;
+                break;
+            case decr_stmt:
+                operator = Sub;
+                break;
+        }
+
+        expr1 = ast_for_testlist(c, ch);
+        if (!expr1) {
+            return NULL;
+        }
+        switch (expr1->kind) {
+            case Name_kind:
+                if (!forbidden_check(c, n, PyBytes_AS_STRING(expr1->v.Name.id))) {
+                    return NULL;
+                }
+                expr1->v.Name.ctx = Store;
+                break;
+            default:
+                ast_error(ch, "illegal target for increment/decrement");
+                return NULL;
+        }
+        // Create a PyObject for the number 1
+        PyObject *pynum = parsenumber(c, "1");
+
+        if (PyArena_AddPyObject(c->c_arena, pynum) < 0) {
+            Py_DECREF(pynum);
+            return NULL;
+        }
+        // Create that as an expression on the same line and offset as the ++/--
+        expr2 = Num(pynum, LINENO(n), n->n_col_offset, c->c_arena);
+        return AugAssign(expr1, operator, expr2, LINENO(n), n->n_col_offset, c->c_arena);
+    }
     else {
         int i;
         asdl_seq *targets;
-- 
1.8.3.1

